'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace WeatherServices
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ServiceModel.ServiceContractAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/", ConfigurationName:="WeatherServices.WeatherSoap")>  _
    Public Interface WeatherSoap
        
        'CODEGEN: Parameter 'GetWeatherInformationResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        <System.ServiceModel.OperationContractAttribute(Action:="http://ws.cdyne.com/WeatherWS/GetWeatherInformation", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true)>  _
        Function GetWeatherInformation(ByVal request As WeatherServices.GetWeatherInformationRequest) As WeatherServices.GetWeatherInformationResponse
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://ws.cdyne.com/WeatherWS/GetCityForecastByZIP", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true)>  _
        Function GetCityForecastByZIP(ByVal ZIP As String) As WeatherServices.ForecastReturn
        
        <System.ServiceModel.OperationContractAttribute(Action:="http://ws.cdyne.com/WeatherWS/GetCityWeatherByZIP", ReplyAction:="*"),  _
         System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults:=true)>  _
        Function GetCityWeatherByZIP(ByVal ZIP As String) As WeatherServices.WeatherReturn
    End Interface
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/")>  _
    Partial Public Class WeatherDescription
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private weatherIDField As Short
        
        Private descriptionField As String
        
        Private pictureURLField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=0)>  _
        Public Property WeatherID() As Short
            Get
                Return Me.weatherIDField
            End Get
            Set
                Me.weatherIDField = value
                Me.RaisePropertyChanged("WeatherID")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=1)>  _
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
                Me.RaisePropertyChanged("Description")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=2)>  _
        Public Property PictureURL() As String
            Get
                Return Me.pictureURLField
            End Get
            Set
                Me.pictureURLField = value
                Me.RaisePropertyChanged("PictureURL")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/")>  _
    Partial Public Class WeatherReturn
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private successField As Boolean
        
        Private responseTextField As String
        
        Private stateField As String
        
        Private cityField As String
        
        Private weatherStationCityField As String
        
        Private weatherIDField As Short
        
        Private descriptionField As String
        
        Private temperatureField As String
        
        Private relativeHumidityField As String
        
        Private windField As String
        
        Private pressureField As String
        
        Private visibilityField As String
        
        Private windChillField As String
        
        Private remarksField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=0)>  _
        Public Property Success() As Boolean
            Get
                Return Me.successField
            End Get
            Set
                Me.successField = value
                Me.RaisePropertyChanged("Success")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=1)>  _
        Public Property ResponseText() As String
            Get
                Return Me.responseTextField
            End Get
            Set
                Me.responseTextField = value
                Me.RaisePropertyChanged("ResponseText")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=2)>  _
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
                Me.RaisePropertyChanged("State")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=3)>  _
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
                Me.RaisePropertyChanged("City")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=4)>  _
        Public Property WeatherStationCity() As String
            Get
                Return Me.weatherStationCityField
            End Get
            Set
                Me.weatherStationCityField = value
                Me.RaisePropertyChanged("WeatherStationCity")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=5)>  _
        Public Property WeatherID() As Short
            Get
                Return Me.weatherIDField
            End Get
            Set
                Me.weatherIDField = value
                Me.RaisePropertyChanged("WeatherID")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=6)>  _
        Public Property Description() As String
            Get
                Return Me.descriptionField
            End Get
            Set
                Me.descriptionField = value
                Me.RaisePropertyChanged("Description")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=7)>  _
        Public Property Temperature() As String
            Get
                Return Me.temperatureField
            End Get
            Set
                Me.temperatureField = value
                Me.RaisePropertyChanged("Temperature")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=8)>  _
        Public Property RelativeHumidity() As String
            Get
                Return Me.relativeHumidityField
            End Get
            Set
                Me.relativeHumidityField = value
                Me.RaisePropertyChanged("RelativeHumidity")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=9)>  _
        Public Property Wind() As String
            Get
                Return Me.windField
            End Get
            Set
                Me.windField = value
                Me.RaisePropertyChanged("Wind")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=10)>  _
        Public Property Pressure() As String
            Get
                Return Me.pressureField
            End Get
            Set
                Me.pressureField = value
                Me.RaisePropertyChanged("Pressure")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=11)>  _
        Public Property Visibility() As String
            Get
                Return Me.visibilityField
            End Get
            Set
                Me.visibilityField = value
                Me.RaisePropertyChanged("Visibility")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=12)>  _
        Public Property WindChill() As String
            Get
                Return Me.windChillField
            End Get
            Set
                Me.windChillField = value
                Me.RaisePropertyChanged("WindChill")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=13)>  _
        Public Property Remarks() As String
            Get
                Return Me.remarksField
            End Get
            Set
                Me.remarksField = value
                Me.RaisePropertyChanged("Remarks")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/")>  _
    Partial Public Class POP
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private nighttimeField As String
        
        Private daytimeField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=0)>  _
        Public Property Nighttime() As String
            Get
                Return Me.nighttimeField
            End Get
            Set
                Me.nighttimeField = value
                Me.RaisePropertyChanged("Nighttime")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=1)>  _
        Public Property Daytime() As String
            Get
                Return Me.daytimeField
            End Get
            Set
                Me.daytimeField = value
                Me.RaisePropertyChanged("Daytime")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/")>  _
    Partial Public Class temp
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private morningLowField As String
        
        Private daytimeHighField As String
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=0)>  _
        Public Property MorningLow() As String
            Get
                Return Me.morningLowField
            End Get
            Set
                Me.morningLowField = value
                Me.RaisePropertyChanged("MorningLow")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=1)>  _
        Public Property DaytimeHigh() As String
            Get
                Return Me.daytimeHighField
            End Get
            Set
                Me.daytimeHighField = value
                Me.RaisePropertyChanged("DaytimeHigh")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/")>  _
    Partial Public Class Forecast
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private dateField As Date
        
        Private weatherIDField As Short
        
        Private desciptionField As String
        
        Private temperaturesField As temp
        
        Private probabilityOfPrecipiationField As POP
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=0)>  _
        Public Property [Date]() As Date
            Get
                Return Me.dateField
            End Get
            Set
                Me.dateField = value
                Me.RaisePropertyChanged("Date")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=1)>  _
        Public Property WeatherID() As Short
            Get
                Return Me.weatherIDField
            End Get
            Set
                Me.weatherIDField = value
                Me.RaisePropertyChanged("WeatherID")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=2)>  _
        Public Property Desciption() As String
            Get
                Return Me.desciptionField
            End Get
            Set
                Me.desciptionField = value
                Me.RaisePropertyChanged("Desciption")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=3)>  _
        Public Property Temperatures() As temp
            Get
                Return Me.temperaturesField
            End Get
            Set
                Me.temperaturesField = value
                Me.RaisePropertyChanged("Temperatures")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=4)>  _
        Public Property ProbabilityOfPrecipiation() As POP
            Get
                Return Me.probabilityOfPrecipiationField
            End Get
            Set
                Me.probabilityOfPrecipiationField = value
                Me.RaisePropertyChanged("ProbabilityOfPrecipiation")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/")>  _
    Partial Public Class ForecastReturn
        Inherits Object
        Implements System.ComponentModel.INotifyPropertyChanged
        
        Private successField As Boolean
        
        Private responseTextField As String
        
        Private stateField As String
        
        Private cityField As String
        
        Private weatherStationCityField As String
        
        Private forecastResultField() As Forecast
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=0)>  _
        Public Property Success() As Boolean
            Get
                Return Me.successField
            End Get
            Set
                Me.successField = value
                Me.RaisePropertyChanged("Success")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=1)>  _
        Public Property ResponseText() As String
            Get
                Return Me.responseTextField
            End Get
            Set
                Me.responseTextField = value
                Me.RaisePropertyChanged("ResponseText")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=2)>  _
        Public Property State() As String
            Get
                Return Me.stateField
            End Get
            Set
                Me.stateField = value
                Me.RaisePropertyChanged("State")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=3)>  _
        Public Property City() As String
            Get
                Return Me.cityField
            End Get
            Set
                Me.cityField = value
                Me.RaisePropertyChanged("City")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlElementAttribute(Order:=4)>  _
        Public Property WeatherStationCity() As String
            Get
                Return Me.weatherStationCityField
            End Get
            Set
                Me.weatherStationCityField = value
                Me.RaisePropertyChanged("WeatherStationCity")
            End Set
        End Property
        
        '''<remarks/>
        <System.Xml.Serialization.XmlArrayAttribute(Order:=5)>  _
        Public Property ForecastResult() As Forecast()
            Get
                Return Me.forecastResultField
            End Get
            Set
                Me.forecastResultField = value
                Me.RaisePropertyChanged("ForecastResult")
            End Set
        End Property
        
        Public Event PropertyChanged As System.ComponentModel.PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
        
        Protected Sub RaisePropertyChanged(ByVal propertyName As String)
            Dim propertyChanged As System.ComponentModel.PropertyChangedEventHandler = Me.PropertyChangedEvent
            If (Not (propertyChanged) Is Nothing) Then
                propertyChanged(Me, New System.ComponentModel.PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="GetWeatherInformation", WrapperNamespace:="http://ws.cdyne.com/WeatherWS/", IsWrapped:=true)>  _
    Partial Public Class GetWeatherInformationRequest
        
        Public Sub New()
            MyBase.New
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"),  _
     System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced),  _
     System.ServiceModel.MessageContractAttribute(WrapperName:="GetWeatherInformationResponse", WrapperNamespace:="http://ws.cdyne.com/WeatherWS/", IsWrapped:=true)>  _
    Partial Public Class GetWeatherInformationResponse
        
        <System.ServiceModel.MessageBodyMemberAttribute([Namespace]:="http://ws.cdyne.com/WeatherWS/", Order:=0),  _
         System.Xml.Serialization.XmlArrayItemAttribute(IsNullable:=false)>  _
        Public GetWeatherInformationResult() As WeatherDescription
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal GetWeatherInformationResult() As WeatherDescription)
            MyBase.New
            Me.GetWeatherInformationResult = GetWeatherInformationResult
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Public Interface WeatherSoapChannel
        Inherits WeatherServices.WeatherSoap, System.ServiceModel.IClientChannel
    End Interface
    
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")>  _
    Partial Public Class WeatherSoapClient
        Inherits System.ServiceModel.ClientBase(Of WeatherServices.WeatherSoap)
        Implements WeatherServices.WeatherSoap
        
        Public Sub New()
            MyBase.New
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String)
            MyBase.New(endpointConfigurationName)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As String)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal endpointConfigurationName As String, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(endpointConfigurationName, remoteAddress)
        End Sub
        
        Public Sub New(ByVal binding As System.ServiceModel.Channels.Binding, ByVal remoteAddress As System.ServiceModel.EndpointAddress)
            MyBase.New(binding, remoteAddress)
        End Sub
        
        <System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)>  _
        Function WeatherServices_WeatherSoap_GetWeatherInformation(ByVal request As WeatherServices.GetWeatherInformationRequest) As WeatherServices.GetWeatherInformationResponse Implements WeatherServices.WeatherSoap.GetWeatherInformation
            Return MyBase.Channel.GetWeatherInformation(request)
        End Function
        
        Public Function GetWeatherInformation() As WeatherDescription()
            Dim inValue As WeatherServices.GetWeatherInformationRequest = New WeatherServices.GetWeatherInformationRequest()
            Dim retVal As WeatherServices.GetWeatherInformationResponse = CType(Me,WeatherServices.WeatherSoap).GetWeatherInformation(inValue)
            Return retVal.GetWeatherInformationResult
        End Function
        
        Public Function GetCityForecastByZIP(ByVal ZIP As String) As WeatherServices.ForecastReturn Implements WeatherServices.WeatherSoap.GetCityForecastByZIP
            Return MyBase.Channel.GetCityForecastByZIP(ZIP)
        End Function
        
        Public Function GetCityWeatherByZIP(ByVal ZIP As String) As WeatherServices.WeatherReturn Implements WeatherServices.WeatherSoap.GetCityWeatherByZIP
            Return MyBase.Channel.GetCityWeatherByZIP(ZIP)
        End Function
    End Class
End Namespace
